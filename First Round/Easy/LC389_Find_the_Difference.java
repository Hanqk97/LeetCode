package Easy;
/*
You are given two strings s and t.
String t is generated by random shuffling string s and then add one more letter at a random position.
Return the letter that was added to t.

Example 1:
Input: s = "abcd", t = "abcde"
Output: "e"
Explanation: 'e' is the letter that was added.
Example 2:
Input: s = "", t = "y"
Output: "y"
Constraints:
0 <= s.length <= 1000
t.length == s.length + 1
s and t consist of lowercase English letters.
 */

import java.util.HashMap;
import java.util.Map;

public class LC389_Find_the_Difference {
    public char findTheDifference(String s, String t) {
        if(s==""){
            return t.charAt(0);
        }


        HashMap<Character,Integer> base = new HashMap<Character, Integer>();
        HashMap<Character,Integer> str = new HashMap<Character, Integer>();
        char r = ' ';
        for(int i=0; i<s.length(); i++){
            char cur = s.charAt(i);
            base.put(cur,base.getOrDefault(cur,0)+1);
        }
        for(int i=0; i<t.length(); i++){
            char cur = t.charAt(i);
            str.put(cur,str.getOrDefault(cur,0)+1);
        }

        for(Map.Entry<Character,Integer> a: str.entrySet()){
            char key = a.getKey();
            if(a.getValue()!=base.get(key)){
                r = key;
                break;
            }
        }

        return r;
    }
    /*
    Official Solution 01 Count
    public char findTheDifference(String s, String t) {
        int[] cnt = new int[26];
        for (int i = 0; i < s.length(); ++i) {
            char ch = s.charAt(i);
            cnt[ch - 'a']++;
        }
        for (int i = 0; i < t.length(); ++i) {
            char ch = t.charAt(i);
            cnt[ch - 'a']--;
            if (cnt[ch - 'a'] < 0) {
                return ch;
            }
        }
        return ' ';
    }

    时间复杂度：O(N)，其中 N 为字符串的长度。
    空间复杂度：(∣Σ∣)，其中 Σ 是字符集，这道题中字符串只包含小写字母，∣Σ∣=26。需要使用数组对每个字符计数。

    Official Solution 02 ASCII
    将字符串 ss 中每个字符的 ASCII 码的值求和，得到 A_s；对字符串 t 同样的方法得到 A_t 。两者的差值 A_t-A_s即代表了被添加的字符。

    public char findTheDifference(String s, String t) {
        int as = 0, at = 0;
        for (int i = 0; i < s.length(); ++i) {
            as += s.charAt(i);
        }
        for (int i = 0; i < t.length(); ++i) {
            at += t.charAt(i);
        }
        return (char) (at - as);
    }

    时间复杂度：O(N)。
    空间复杂度：O(1)。
     */

    public static void main(String[] args) {
        LC389_Find_the_Difference a = new LC389_Find_the_Difference();
        System.out.println(a.findTheDifference("abcd","abcde"));
    }
}
